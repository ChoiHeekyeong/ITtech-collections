

## 이모지 😉
  - 유니코드를 이용해 만든 그림 문자.
  - 시간이 지나면서 기존 이미지들이 변형되거나 결합되어 새로운 형태의 이모지들이 등장하고 있다.
  - 유니코드에는 변이 글자를 처리하는 variation selector라는 구조가 있고, 이것을 이모티콘 스타일 지정에 사용한다. 이모티콘 뒤에 U+FE0E VARIATION SELECTOR-15 (TPVS) 또는 U+FE0F VARIATION SELECTOR-16 (EPVS) 를 붙여 스타일을 지정한다.

  
### 1. 이모지 사용 방법
  - 윈도우 : 윈도우키 + .
  - 맥 : Command + Control + 스페이스


  
### 2. 이모지 사용시 주의 점 (호환성 등)
- 이모지는 다양하고, 모든 이미지가 모든 환경에서 다 제공되는 것은 아니다.
  PC에서 특정 이모지를 사용했지만 안드로이드, iOS에서는 지원하지 않아 깨져보일 수 있다.
  이것은 비단 PC, 모바일 환경의 차이 뿐 아니라 구글, 트위터, 인스타그램과 같은 플랫폼에서도 특정한 곳에서만 지원하는 이모지도 존재한다.

    
    
### 3. 이모지 입력 제한 방법
1 ) 라이브러리 사용<br>
    pom.xml에 emoji-java 라이브러리를 추가시킨다

    ```
    <!-- pom.xml 설정 방법 -->
    <!-- https://mvnrepository.com/artifact/com.vdurmont/emoji-java -->
    <dependency>
    <groupId>com.vdurmont</groupId>
    <artifactId>emoji-java</artifactId>
    <version>5.1.1</version>
    </dependency>
    ```    
  
  ```
    String kingPork = " king Pork. 🤞🤣🤞 ";
    String emojiRemoved = EmojiParser.removeAllEmojis(kingPork);
    System.out.println(emojiRemoved); 
  ```
  


  라이브러리 최신 버전은 https://central.sonatype.com/search?q=emoji-java&smo=true 에서 확인한다.   
  다만, 버전이 오래되다보니 최근에 등장하기 시작한 결합되거나, 변형된 이모지들을 걸러내지 못한다. ex ) 🤼‍♀
  <br><br><br><br>
     2 ) JS 정규식 이용<br>
     아래 js 정규식을 이용하면 결합형 이모지도 필터링 할 수 있다.
      
 
  ```
  var testString = "🥰🥵🥶🥳🥴🥺👨‍🦰👩‍🦰👨‍🦱👩‍🦱👨‍🦲👩‍🦲👨‍🦳👩‍🦳🎨🎦🖖🤸‍♂️🏋️‍♀️🧛🏽⛷🤼‍♂️🤼‍♀️💖💅";

  var converted = testString.replace(/(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|\ud83c[\ude32-\ude3a]|\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])/g, "");

  console.log("converted -> ", converted);
  ```


 <br><br>

## 유니코드

  : 현존하는 전 세계의 모든 문자를 시스템에서 표현하고 다룰 수 있도록 고안된 표준.
    일반적으로 유니코드에서는 각 코드 포인트를 표기할 때 16진수로 표기하되 접두어로 U+를 붙인다.
    그리고 16진수가 0xFF이하인 경우 0을 붙여서 사용한다. ex) 0x41 -> U+0041
 <br><br>
### 1. 한글 표현 방식
![korean](./image/korean.jfif)
|구분|설명|
|:--|--|
|조합형|- 한글 모음과 자음을 조합해서 한글을 표현.<br>- 초성,중성,종성을 각기 따로 하나의 바이트로 인식하고 조합.|
|완성형|- 이미 한글 11,172자가 완성되어있는 문자표로부터 가져와서 한글을 표현.<br>- 표에 명시되어 있지 않은 한글은 깨져서 표현된다.|


### 2. 유니코드 UTF-8, EUC-KR, CP949, MS949 들의 차이

|코드|설명|
|:--|--|
|UTF-8|- 전 세계의 모든 문자를 지원한다.<br>- 유닉스/윈도우 양쪽 계열 모두에서 사용되는 확장 완성형<br>- 1~4byte로 인코딩하는 가변 크기 인코딩 방식|
|EUC-KR|- 전 세계의 모든 문자를 지원하지 않는다.<br>- 가변길이 방식의 영어, 특수문자, 한글, 일부한자만 표현가능.<br> - 한글을 **완성형** 방식으로 지원한다.<br>- 2,350 자의 한글 표현 가능<br>- 한글 한 글자당 2byte로 인코딩|
|CP949|- 전 세계의 모든 문자를 지원하지 않는다.<br>- 가변길이 방식의 영어, 특수문자, 한글, 일부한자만 표현가능.<br>- **확장 완성형**으로, 완성형 코드 표에 없는 한글 글자를 조합형으로 처리한다.<br>- 11,172 자의 한글 표현 가능<br>- CP949 에서 EUC-KR 로 변환이 잘 안될 경우, 원인은 CP949 가 EUD-KR 보다 더 많은 문자조합의 경우 수를 가지고 있기 때문이다.<br>- 마이크로소프트가 개발했기 때문에 MS949, Windows-949 등으로도 불린다.|



<br><br>

## 윈도우-맥 파일공유 시 한글 파일명이 깨지는 현상
### 1. 원인   
맥과 윈도우가 사용하는 한글처리 방식이 다르기 때문이다.   
   
맥은 완성형과 조합형을 모두 지원하지만 윈도우는 완성형만 지원한다.
따라서 윈도우에서 작성한 파일은 맥에서 잘 보이지만, 맥에서 작성한 파일명은 조합명으로 저장되기 때문에 윈도우에서는 깨져 보인다.
<br><br><br>

### 2. 해결 방안   
근본적인 해결 방안은 윈도우가 조합형도 지원을 하거나, 맥이 파일을 완성형으로 저장하도록 바뀌는 것이다.   
하지만 사용자들이 해결할 수 없는 부분이므로 각 OS에 맞게 패치프로그램을 이용하여 해결하는 방법이 있다.<br><br>
- 맥에서 압축시 Keka(케카)를 이용하여 압축한다.  
- 윈도우에서는 '반디집'에서 ( 코드페이지>맥OS(UTC-8) )로 설정하고 압축을 풀면 파일명이 깨지지 않는다.
또는 깨진 파일 명을 받았을 때, [한글자소교정기](https://namocom.tistory.com/630) 프로그램을 이용하여 파일명을 교정한다.





